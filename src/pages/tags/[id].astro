---
import type { MarkdownInstance } from 'astro'
import type { Frontmatter } from '../../config'
import { SiteMetadata } from '../../config'
import Base from '../../layouts/base.astro'
import PageHero from '../../components/pagehero.astro'
import BlogRoll from '../../components/blogroll.astro'

export interface Props {
  tag: string
  posts: MarkdownInstance<Frontmatter>[]
}

const { id } = Astro.params
const { tag, posts } = Astro.props as Props

const frontmatter: Frontmatter = {
  title: 'Tag: ' + tag,
  description: 'Posts tagged with ' + tag + ' (' + posts.length + ')',
  coverSVG: '../svg/undraw/undraw_building_websites.svg',
  socialImage: '/images/undraw/undraw_building_websites.png',
  publishDate: SiteMetadata.buildTime,
}

export async function getStaticPaths() {
  const allPosts = (await Astro.glob(
    '../blog/*.{md,mdx}'
  )) as MarkdownInstance<Frontmatter>[]
  const posts = allPosts
    .sort(
      (a, b) =>
        new Date(b.frontmatter.publishDate).valueOf() -
        new Date(a.frontmatter.publishDate).valueOf()
    )
    .filter(post => !post.frontmatter.draft)

  const tags = Array.from(new Set(posts.flatMap(post => post.frontmatter.tags)))

  return tags.map(tag => ({
    params: { id: tag && encodeURIComponent(tag) },
    props: {
      tag: tag,
      posts: posts.filter(post => tag && post.frontmatter.tags?.includes(tag)),
    },
  }))
}
---

<Base frontmatter={frontmatter}>
  <header>
    <PageHero
      title={frontmatter.title}
      description={frontmatter.description}
      coverSVG={frontmatter.coverSVG}
      socialImage={frontmatter.socialImage}
    />
  </header>
  <main class="mt-10 bg-gray-100">
    <BlogRoll posts={posts} />
  </main>
</Base>
